name: CI Android - Phoenix & Phoenix64

on:
  push:
  pull_request:
  workflow_dispatch:
  repository_dispatch:
    types: [run_build]

permissions:
  contents: read

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build-phoenix:
    runs-on: ubuntu-22.04
    name: Build Phoenix (debug-tvbox)
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip curl

      - name: Atualizar núcleos 32-bit (armeabi-v7a)
        run: |
          set -e
          CORES_DIR="pkg/android/phoenix/assets/cores"
          TEMP_DIR="tmp_cores32"
          BASE_URL="https://buildbot.libretro.com/nightly/android/latest/armeabi-v7a/"
          
          mkdir -p "$CORES_DIR" "$TEMP_DIR"
          
          # Baixa todos os zips do Buildbot
          curl -s $BASE_URL | grep -o 'href=".*\.zip"' | sed 's/href="//;s/"//' | while read ZIP_NAME; do
            curl -L "$BASE_URL$ZIP_NAME" -o "$TEMP_DIR/$ZIP_NAME"
            unzip -o "$TEMP_DIR/$ZIP_NAME" -d "$TEMP_DIR"
          done

          # Copia só os arquivos .so para cores
          cp -f "$TEMP_DIR"/*.so "$CORES_DIR/"
          rm -rf "$TEMP_DIR"

      - name: Compile Phoenix - debug-tvbox
        run: |
          cd pkg/android/phoenix
          ./gradlew assembleDebug
          find . -iname "*.apk" -exec ls -l "{}" \;

      - name: Get short SHA
        id: slug_phoenix
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - uses: actions/upload-artifact@v4
        with:
          name: retroarch-phoenix-${{ steps.slug_phoenix.outputs.sha8 }}
          path: |
            pkg/android/phoenix/build/outputs/apk/tvbox/debug/phoenix-tvbox-debug.apk

  build-phoenix64:
    runs-on: ubuntu-22.04
    name: Build Phoenix64 (debug-celular)
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip zip curl

      - name: Atualizar núcleos 64-bit (arm64-v8a)
        run: |
          set -e
          CORES_DIR="pkg/android/phoenix64/assets/cores"
          TEMP_DIR="tmp_cores64"
          BASE_URL="https://buildbot.libretro.com/nightly/android/latest/arm64-v8a/"
          
          mkdir -p "$CORES_DIR" "$TEMP_DIR"
          
          # Baixa todos os zips do Buildbot
          curl -s $BASE_URL | grep -o 'href=".*\.zip"' | sed 's/href="//;s/"//' | while read ZIP_NAME; do
            curl -L "$BASE_URL$ZIP_NAME" -o "$TEMP_DIR/$ZIP_NAME"
            unzip -o "$TEMP_DIR/$ZIP_NAME" -d "$TEMP_DIR"
          done

          # Copia só os arquivos .so para cores
          cp -f "$TEMP_DIR"/*.so "$CORES_DIR/"
          rm -rf "$TEMP_DIR"

      - name: Compile Phoenix64 - debug-celular
        run: |
          cd pkg/android/phoenix64
          ./gradlew assembleDebug
          find . -iname "*.apk" -exec ls -l "{}" \;

      - name: Get short SHA
        id: slug_phoenix64
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - uses: actions/upload-artifact@v4
        with:
          name: retroarch-phoenix64-${{ steps.slug_phoenix64.outputs.sha8 }}
          path: |
            pkg/android/phoenix64/build/outputs/apk/celular/debug/phoenix-celular-debug.apk