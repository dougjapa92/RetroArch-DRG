buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.12.1'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    Properties props = new Properties()
    props.load(new FileInputStream(new File(project.rootDir, "retroarch.properties")))
    props.each { prop ->
        project.ext.set(prop.key, prop.value)
    }
}

apply plugin: 'com.android.application'

android {
    namespace "com.retroarch"
    compileSdkVersion 35
    ndkVersion "22.0.7026061"
    flavorDimensions "variant"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 32
        versionCode System.currentTimeSeconds().toInteger()
        versionName "${getManifestAttribute("versionName")}_DRG"

        externalNativeBuild {
            ndkBuild {
                arguments "-j${Runtime.runtime.availableProcessors()}"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildFeatures {
        buildConfig = true
    }

    productFlavors {
        normal {
            resValue "string", "app_name", "RetroArch DRG"
            buildConfigField "boolean", "PLAY_STORE_BUILD", "false"
            dimension "variant"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            assets.srcDirs = ['assets']
            java.srcDirs = ['src', '../phoenix-common/src']
            jniLibs.srcDir '../phoenix-common/libs'
            jni.srcDirs = []
            res.srcDirs = ['res', '../phoenix-common/res']
            assets.srcDirs += 'pkg/android/phoenix/assets'
        }
        normal {
            java.srcDirs += ['../play-core-stub']
        }
    }

    externalNativeBuild {
        ndkBuild {
            path '../phoenix-common/jni/Android.mk'
        }
    }

    signingConfigs {
        release {
            def keystorePath = "${buildDir}/keystore/release.keystore"
            def keystoreBase64 = System.getenv("KEYSTORE_BASE64")
            def keystoreBytes = keystoreBase64?.decodeBase64()
            if (keystoreBytes != null) {
                def keystoreFile = new File(keystorePath)
                keystoreFile.parentFile.mkdirs()
                keystoreFile.bytes = keystoreBytes
                storeFile keystoreFile
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            } else {
                throw new GradleException("Keystore base64 não encontrado ou inválido")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    lint {
        checkReleaseBuilds true
        abortOnError false
    }

    aaptOptions {
        ignoreAssetsPattern "!*.nomedia"
    }
    packagingOptions {
        pickFirst '**/.nomedia'
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.12.0'
}

String getManifestAttribute(String attribute) {
    def manifest = new XmlParser().parse("${project.projectDir}/AndroidManifest.xml")
    return manifest.attributes().find { ((String) it.key).contains(attribute) }?.value
} 
