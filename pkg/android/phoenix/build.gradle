buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    Properties props = new Properties()
    props.load(new FileInputStream(new File(project.rootDir, "retroarch.properties")))
    props.each { prop -> 
        project.ext.set(prop.key, prop.value)
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 32
    buildToolsVersion "32.0.0"
    ndkVersion "22.0.7026061"

    flavorDimensions "variant"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 32
        versionCode System.currentTimeSeconds().toInteger()
        versionName "${getManifestAttribute("versionName")}_GIT"

        externalNativeBuild {
            ndkBuild {
                arguments "-j${Runtime.runtime.availableProcessors()}"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    productFlavors {
        normal {
            resValue "string", "app_name", "RetroArch DRG"
            buildConfigField "boolean", "PLAY_STORE_BUILD", "false"
            dimension "variant"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            assets.srcDirs = ['assets']
            java.srcDirs = ['src', '../phoenix-common/src']
            jniLibs.srcDir '../phoenix-common/libs'
            jni.srcDirs = []
            res.srcDirs = ['res', '../phoenix-common/res']
        }
        normal {
            java.srcDirs += ['../play-core-stub']
        }
    }

    externalNativeBuild {
        ndkBuild {
            path '../phoenix-common/jni/Android.mk'
        }
    }

    signingConfigs {
        release {
            def keystorePath = System.getenv("GITHUB_WORKSPACE") + "/pkg/android/phoenix/my-release-key.keystore"
            storeFile file(keystorePath)
            storePassword "123456"
            keyAlias "phoenixkey"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
}

dependencies {
    // Dependências necessárias
}

String getManifestAttribute(String attribute) {
    def manifest = new XmlParser().parse("${project.projectDir}/AndroidManifest.xml")
    return manifest.attributes().find { ((String) it.key).contains(attribute) }.value
}
